package efimovta.store;

import efimovta.store.dao.impl.sim.StorageInMemory;
import efimovta.store.menu.MenuManager;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;

import static efimovta.store.Config.BACKUP_LOCATION;
import static efimovta.store.Messages.APP_START;
import static efimovta.store.Messages.APP_SUCCESSFULLY_CLOSED;
import static efimovta.store.Messages.STORAGE_FILLED_WITH_AUTO_GENERATED_DATA;

/**
 * Entry point
 * Will try to download the saveBackup. If it is missing or other
 * problems, the data will be generated by the class.
 * After exiting the program, the saveBackup will be saved
 */
public class Main {
    private static final Logger log = Logger.getLogger(Main.class.getName());

    private static final String LOG_RESOURCE_FILE = "/logging.properties";
    private static final String EXIT_SYMBOL = "q";
    private static final File backupFile = new File(BACKUP_LOCATION);

    private Main() {
    }

    /**
     * Entry point
     *
     * @param args not used
     */
    public static void main(String[] args) {
        setupLogger();
        log.info(APP_START);
        fillStorage();
        run();
        saveBackup();
        log.info(APP_SUCCESSFULLY_CLOSED);
    }

    private static void saveBackup() {
        boolean saved = false;
        while (!saved) {
            try {
                StorageInMemory.saveBackup(backupFile);
                saved = true;
            } catch (BackupException e) {
                String msg = "problem with saving saveBackup ("
                        + backupFile.getAbsolutePath() + "): "
                        + e.getMessage();
                Util.println(msg);
                log.log(Level.SEVERE, msg, e);

                Util.println("Press " + EXIT_SYMBOL
                        + " for exit without saving saveBackup "
                        + "or type Enter to try again");
                String otv = Util.readLine();
                if (otv.equals(EXIT_SYMBOL)) {
                    break;
                }
            }
        }
    }

    private static void run() {
        MenuManager.startDialog();
    }

    private static void fillStorage() {
        if (backupFile.exists()) {
            try {
                StorageInMemory.loadBackup(backupFile);
                log.info("storage filled from saveBackup");
            } catch (BackupException e) {
                String msg = "problem with loading saveBackup ("
                        + backupFile.getAbsolutePath() + "): "
                        + e.getMessage();
                Util.println(msg);
                log.log(Level.SEVERE, msg, e);
                fillStorageWithAutoGeneratedData();
            }
        } else {
            fillStorageWithAutoGeneratedData();
        }
    }

    private static void fillStorageWithAutoGeneratedData() {
        StorageFiller.fillStorage();
        Util.println(STORAGE_FILLED_WITH_AUTO_GENERATED_DATA);
        log.info(STORAGE_FILLED_WITH_AUTO_GENERATED_DATA);
    }

    private static void setupLogger() {
        try {
            LogManager.getLogManager().readConfiguration(
                    Main.class.getResourceAsStream(LOG_RESOURCE_FILE));
        } catch (IOException e) {
            String msg = "Could not setup logger configuration: "
                    + e.toString();
            Util.println(msg);
            log.log(Level.SEVERE, msg, e);
        }
    }
}
